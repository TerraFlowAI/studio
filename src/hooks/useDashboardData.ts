
'use client';
import { useState, useEffect } from 'react';
import { useAuth } from '@/app/context/AuthContext';
import { firestore, app } from '@/lib/firebase'; // Import app for functions
import { getFunctions, httpsCallable } from "firebase/functions";
import { collection, query, where, getDocs, Timestamp, limit, orderBy } from 'firebase/firestore';
import type { Property } from '@/types/property';

// Define return types
interface KpiData {
  activeLeads: number;
  propertiesSold: number;
  totalRevenue: string;
  avgDealTime: number;
}

interface SalesStats {
  labels: string[];
  datasets: Array<{ data: number[], color: string, name: string }>;
}

// The property type from the dashboard perspective might be simpler
export interface DashboardProperty {
    id: string;
    title: string;
    locality: string;
    price: string;
    imageUrl: string;
    aiHint: string;
}

interface GrowthStats {
  totalSales: string;
  totalProfit: string;
  totalCost: string;
}

export function useDashboardData() {
  const { user } = useAuth();
  const [loading, setLoading] = useState(true);
  const [kpiData, setKpiData] = useState<KpiData>({
    activeLeads: 0,
    propertiesSold: 0,
    totalRevenue: '₹0',
    avgDealTime: 0,
  });
  const [salesStats, setSalesStats] = useState<SalesStats>({
    labels: [],
    datasets: [{ data: [], color: "hsl(var(--primary))", name: "Total Sales" }],
  });
  const [recentProperties, setRecentProperties] = useState<DashboardProperty[]>([]);
  const [aiMessage] = useState("The Sale Agreement has been generated by TerraScribe™. The buyer's E-Khata has been uploaded and is currently being verified by TerraSecure™. I'll notify you the moment the verification is complete.");
  const [growthStats, setGrowthStats] = useState<GrowthStats>({
    totalSales: '₹0',
    totalProfit: '₹0',
    totalCost: '₹0',
  });


  useEffect(() => {
    if (!user) {
      setLoading(false);
      return;
    }

    const fetchData = async () => {
      setLoading(true);
      try {
        const functions = getFunctions(app);

        // --- Setup Callable Functions ---
        const getDashboardKPIs = httpsCallable(functions, 'getDashboardKPIs');
        const getSalesStatsChart = httpsCallable(functions, 'getSalesStatsChart');

        // --- Fetch Data in Parallel ---
        const kpiPromise = getDashboardKPIs();
        const salesStatsPromise = getSalesStatsChart();
        const recentPropertiesQuery = query(
          collection(firestore, "properties"),
          where('ownerId', '==', user.uid),
          where('status', '==', 'Active'),
          orderBy('dateAdded', 'desc'),
          limit(3)
        );
        const recentPropertiesPromise = getDocs(recentPropertiesQuery);

        const [kpiResult, salesStatsResult, recentPropertiesSnap] = await Promise.all([
          kpiPromise,
          salesStatsPromise,
          recentPropertiesPromise
        ]);

        // --- Process KPI Data ---
        const rawKpiData = kpiResult.data as any;
        const revenueInLakh = (rawKpiData.totalRevenue || 0) / 100000;
        const formattedRevenue = revenueInLakh >= 100 
          ? `₹${(revenueInLakh / 100).toFixed(2)} Cr` 
          : `₹${revenueInLakh.toFixed(2)} Lakh`;
        
        setKpiData({
            activeLeads: rawKpiData.activeLeads || 0,
            propertiesSold: rawKpiData.propertiesSold || 0,
            totalRevenue: formattedRevenue,
            avgDealTime: rawKpiData.avgDealTime || 0,
        });

        // --- Process Growth Stats Data from KPI ---
        const totalSalesFormatted = formattedRevenue;
        const totalProfitInLakh = revenueInLakh * 0.25; // mock 25% profit
        const totalProfitFormatted = totalProfitInLakh >= 100
            ? `₹${(totalProfitInLakh / 100).toFixed(2)} Cr`
            : `₹${totalProfitInLakh.toFixed(2)} Lakh`;
            
        const totalCostInLakh = revenueInLakh * 0.75; // mock 75% cost
        const totalCostFormatted = totalCostInLakh >= 100
            ? `₹${(totalCostInLakh / 100).toFixed(2)} Cr`
            : `₹${totalCostInLakh.toFixed(2)} Lakh`;

        setGrowthStats({
            totalSales: totalSalesFormatted,
            totalProfit: totalProfitFormatted,
            totalCost: totalCostFormatted,
        });

        // --- Process Sales Chart Data ---
        const rawSalesData = salesStatsResult.data as any;
        setSalesStats({
            labels: rawSalesData.labels || [],
            datasets: [{ data: rawSalesData.data || [], color: "hsl(var(--primary))", name: "Total Sales" }]
        });
        
        // --- Process Recent Properties ---
        const fetchedProperties: DashboardProperty[] = recentPropertiesSnap.docs.map(doc => ({
            id: doc.id,
            title: doc.data().title || 'Untitled',
            locality: doc.data().locality || 'N/A',
            price: doc.data().price || 'N/A',
            imageUrl: doc.data().imageUrl || 'https://placehold.co/600x400.png',
            aiHint: doc.data().aiHint || 'property exterior',
        }));
        setRecentProperties(fetchedProperties);

      } catch (error) {
        console.error("Error fetching dashboard data from Cloud Functions:", error);
      } finally {
        setLoading(false);
      }
    };

    fetchData();
  }, [user]);

  return { loading, kpiData, salesStats, aiMessage, recentProperties, growthStats };
}
