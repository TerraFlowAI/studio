
'use client';
import { useState, useEffect } from 'react';
import { useAuth } from '@/app/context/AuthContext';
import { firestore } from '@/lib/firebase';
import { collection, query, where, getCountFromServer, getDocs, Timestamp, limit, orderBy } from 'firebase/firestore';

// Define return types
interface KpiData {
  activeLeads: number;
  propertiesSold: number;
  totalRevenue: string; // Keep as string for display
  avgDealTime: number;
}

interface SalesStats {
  labels: string[];
  datasets: Array<{ data: number[], color: string, name: string }>;
}

export interface Property {
    id: string;
    title: string;
    locality: string;
    price: string;
    imageUrl: string;
    aiHint: string;
}

export function useDashboardData() {
  const { user } = useAuth();
  const [loading, setLoading] = useState(true);
  const [kpiData, setKpiData] = useState<KpiData>({
    activeLeads: 0,
    propertiesSold: 0,
    totalRevenue: '₹0',
    avgDealTime: 0,
  });
  const [salesStats, setSalesStats] = useState<SalesStats>({
    labels: [],
    datasets: [{ data: [], color: "hsl(var(--primary))", name: "Total Sales" }],
  });
  const [recentProperties, setRecentProperties] = useState<Property[]>([]);
  const [aiMessage] = useState("The Sale Agreement has been generated by TerraScribe™. The buyer's E-Khata has been uploaded and is currently being verified by TerraSecure™. I'll notify you the moment the verification is complete.");

  useEffect(() => {
    if (!user) {
      setLoading(false);
      return;
    }

    const fetchData = async () => {
      setLoading(true);
      try {
        // --- KPI Data ---
        const leadsRef = collection(firestore, 'leads');
        const activeLeadsQuery = query(leadsRef, where('ownerId', '==', user.uid), where('status', 'in', ['New', 'Contacted', 'Viewing Scheduled', 'Offer Made', 'Qualified']));
        const activeLeadsSnap = await getCountFromServer(activeLeadsQuery);

        const propertiesRef = collection(firestore, 'properties');
        // This is a placeholder as `status: "Sold"` may not exist in user's mock data yet.
        const soldPropertiesQuery = query(propertiesRef, where('ownerId', '==', user.uid), where('status', '==', 'Sold'));
        const soldPropertiesSnap = await getDocs(soldPropertiesQuery);
        
        const propertiesSoldCount = soldPropertiesSnap.size;
        
        // Mock revenue as summing string prices isn't feasible. In a real app, this should be a numeric field.
        const totalRevenueValue = propertiesSoldCount * 18000000; // Mocking 1.8 Cr per sold property
        const formattedRevenue = `₹${(totalRevenueValue / 10000000).toFixed(1)} Cr`;

        // --- Sales Chart Data ---
        // This is a mock implementation as a numeric price and sold date are not available on all property docs.
        const salesData: { [key: string]: number } = {};
        const monthLabels: string[] = [];
        const sixMonthsAgo = new Date();
        sixMonthsAgo.setMonth(sixMonthsAgo.getMonth() - 6);
        const mockSalesPerMonth = [500000, 800000, 1200000, 700000, 1500000, 2100000];
        
        for (let i = 5; i >= 0; i--) {
            const d = new Date();
            d.setMonth(d.getMonth() - i);
            const monthYear = d.toLocaleString('default', { month: 'short' });
            monthLabels.push(monthYear);
            salesData[monthYear] = mockSalesPerMonth[5-i];
        }
        const salesChartValues = monthLabels.map(label => salesData[label] || 0);

        // --- Recent Properties ---
        const recentPropertiesQuery = query(
          collection(firestore, "properties"),
          where('ownerId', '==', user.uid), 
          where('status', '==', 'Active'),
          orderBy('dateAdded', 'desc'),
          limit(3)
        );
        const recentPropertiesSnap = await getDocs(recentPropertiesQuery);
        const fetchedProperties: Property[] = recentPropertiesSnap.docs.map(doc => ({
            id: doc.id,
            title: doc.data().title || 'Untitled',
            locality: doc.data().locality || 'N/A',
            price: doc.data().price || 'N/A',
            imageUrl: doc.data().imageUrl || 'https://placehold.co/600x400.png',
            aiHint: doc.data().aiHint || 'property exterior',
        }));


        setKpiData({
          activeLeads: activeLeadsSnap.data().count,
          propertiesSold: propertiesSoldCount,
          totalRevenue: formattedRevenue,
          avgDealTime: 32, // Static as requested
        });

        setSalesStats({
          labels: monthLabels,
          datasets: [{ data: salesChartValues, color: "hsl(var(--primary))", name: "Total Sales" }],
        });

        setRecentProperties(fetchedProperties);

      } catch (error) {
        console.error("Error fetching dashboard data:", error);
      } finally {
        setLoading(false);
      }
    };

    fetchData();
  }, [user]);

  return { loading, kpiData, salesStats, aiMessage, recentProperties };
}
