
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if the requesting user is the owner of a document
    function isOwner(uid) {
      return request.auth != null && request.auth.uid == uid;
    }

    match /leads/{leadId} {
      // A user can read their own lead documents.
      // This rule also implicitly allows queries like `where("ownerId", "==", request.auth.uid)`
      allow read: if isOwner(resource.data.ownerId);

      // A user can create a lead, but the ownerId in the new document must be their own UID.
      allow create: if isOwner(request.resource.data.ownerId);

      // A user can update or delete their own lead documents.
      allow update, delete: if isOwner(resource.data.ownerId);
    }
    
    match /properties/{propertyId} {
      allow read: if isOwner(resource.data.ownerId);
      allow create: if isOwner(request.resource.data.ownerId);
      allow update, delete: if isOwner(resource.data.ownerId);
    }

    match /documents/{docId} {
        allow read: if isOwner(resource.data.ownerId);
        allow create: if isOwner(request.resource.data.ownerId);
        allow update, delete: if isOwner(resource.data.ownerId);
    }
    
    match /notifications/{notificationId} {
      // A user can read notifications where they are the recipient.
      allow read: if isOwner(resource.data.userId);

      // Notifications should only be created by backend functions, not by clients.
      allow write: if false; 
    }
  }
}
