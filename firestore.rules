
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Rules for the 'leads' collection
    match /leads/{leadId} {
      // Any authenticated user can create a lead, as long as they set themselves as the owner.
      allow create: if request.auth != null && request.resource.data.ownerId == request.auth.uid;

      // Only the owner of a lead can read, update, or delete it.
      // The query in the app filters by ownerId, which makes this 'list' operation secure.
      allow read, update, delete: if request.auth != null && resource.data.ownerId == request.auth.uid;
    }

    // Rules for the 'properties' collection
    match /properties/{propertyId} {
      // Any authenticated user can create a property, setting themselves as the owner.
      allow create: if request.auth != null && request.resource.data.ownerId == request.auth.uid;
      
      // Only the owner can read, update, or delete their own property.
      allow read, update, delete: if request.auth != null && resource.data.ownerId == request.auth.uid;
    }
    
    // Rules for the 'documents' collection
    match /documents/{documentId} {
       // Any authenticated user can create a document, setting themselves as the owner.
       allow create: if request.auth != null && request.resource.data.ownerId == request.auth.uid;

       // Only the owner can read, update, or delete their own documents.
       allow read, update, delete: if request.auth != null && resource.data.ownerId == request.auth.uid;
    }
    
    // Rules for 'notifications'
    match /notifications/{notificationId} {
       // Only allow reading if the userId on the notification matches the requester's UID.
       allow read: if request.auth != null && resource.data.userId == request.auth.uid;
       
       // Disallow all client-side writes for security. Notifications are created by backend functions only.
       allow write: if false;
    }
  }
}
